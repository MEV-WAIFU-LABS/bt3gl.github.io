<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>chmod +x singularity.sh</title><link href="http://singularity.miavonsteinkirch.com/" rel="alternate"></link><link href="http://singularity.miavonsteinkirch.com/feeds/aws.atom.xml" rel="self"></link><id>http://singularity.miavonsteinkirch.com/</id><updated>2016-04-15T09:00:00-04:00</updated><entry><title>System Designing with End-to-end Applications in AWS</title><link href="http://singularity.miavonsteinkirch.com/system-designing-with-end-to-end-applications-in-aws.html" rel="alternate"></link><updated>2016-04-15T09:00:00-04:00</updated><author><name>Mia Steinkirch</name></author><id>tag:singularity.miavonsteinkirch.com,2016-04-15:system-designing-with-end-to-end-applications-in-aws.html</id><summary type="html">&lt;p&gt;&lt;img alt="cyberpunk" height="270px" src="./cyberpunk/city.jpg" width="390px" /&gt;&lt;/p&gt;
&lt;p&gt;Some time ago I had to implement an end-to-end application to perform some manipulations (with &lt;a href="https://ffmpeg.org/"&gt;FFMPEG&lt;/a&gt;) on surf video clips that were available in some cloud storage resource (say, &lt;a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingBucket.html"&gt;S3 buckets&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;The app I wrote was a Python software running in &lt;a href="https://aws.amazon.com/lambda/"&gt;AWS Lambda&lt;/a&gt;, which would be triggered by messages from an &lt;a href="https://aws.amazon.com/sqs/"&gt;SQS&lt;/a&gt; queue. The function would then retrieve some specific clip, trim and edit it, and then it would 1) save the new clips to a destination bucket, 2) add their metadata to a &lt;a href="https://www.mongodb.com/"&gt;MongoDB&lt;/a&gt; database, and 3) send a notification to a &lt;a href="https://aws.amazon.com/sns/"&gt;SNS&lt;/a&gt; topic, so that the front end bit could pick it up.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Anonymous_function"&gt;Lambda functions&lt;/a&gt; are fantastic because they abstract several layers in your design (e.g., serverless, anonymous), and they are super easy to set up. But I am getting ahead myself, let's talk a little more about high-level system design!&lt;/p&gt;
&lt;p&gt;Whenever you are designing a system, these are some first questions to think about:&lt;/p&gt;
&lt;h2&gt;Scope of the System&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;User cases&lt;/strong&gt;: Who is going to use it? How are they going to use it?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Constraints&lt;/strong&gt;: Amount of traffic, amount of data, the scale of the system (e.g., requests per second, requests types, data written per second, data read per second), special system requirements (e.g., multi-threading, read or write-oriented, etc.)?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt; High-level architecture design&lt;/strong&gt;: Application service layer, different services required, data storage layer?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Understanding bottlenecks&lt;/strong&gt;: Do we need a load balancer and many instances behind it to handle user requests? Is data large enough so that you need to distribute your database on multiple machines? What are the downsides from doing that?&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;User interface&lt;/strong&gt;: Is this a full web app, with a web interface? Or just a RESTful API?&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Availability &amp;amp; Reliability&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;How can things fail, especially in a distributed environment?&lt;/li&gt;
&lt;li&gt;How to design a system to cope with network failures?&lt;/li&gt;
&lt;li&gt;Should the system be 100% reliable? &lt;/li&gt;
&lt;li&gt;Do we need high availability? &lt;/li&gt;
&lt;li&gt;Do we need redundancy (e.g., multiple replicas of services running in the system, so that if a few services die down the system remains available and running)?&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Scaling&lt;/h2&gt;
&lt;p&gt;Simply put, you can scale your system &lt;strong&gt;vertically&lt;/strong&gt; (e.g., adding more CPU, RAM to your existing machine), or &lt;strong&gt;horizontally&lt;/strong&gt; (adding more machines into your pool of resources).&lt;/p&gt;
&lt;h3&gt;Database&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Do we need a &lt;strong&gt;relational database&lt;/strong&gt; that is based on tabular design (e.g. MySQL) or &lt;strong&gt;non-relational NoSQL&lt;/strong&gt;, which is document-based (e.g. MongoDB)?&lt;/li&gt;
&lt;li&gt;Do we need &lt;strong&gt;Database replication&lt;/strong&gt; (e.g., the frequent copying data from a database in one server to a database in another, so that all users share the same level of information)?&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Caching and Fast lookups&lt;/h3&gt;
&lt;p&gt;There are several types of &lt;strong&gt;caches&lt;/strong&gt; that can be used in your application: &lt;strong&gt;application caching&lt;/strong&gt;, &lt;strong&gt;database caching&lt;/strong&gt;, &lt;strong&gt;in-memory caches&lt;/strong&gt;, &lt;strong&gt;global cache&lt;/strong&gt;, &lt;strong&gt;distributed cache&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;One example of a popular open-source cache is &lt;a href="http://memcached.org/"&gt;Memcached&lt;/a&gt; (which can work both as a local cache and distributed cache). Memcached is used in many large web sites, and even though it can be very powerful, it is simply an in-memory key-value store, optimized for arbitrary data storage and fast lookups.&lt;/p&gt;
&lt;h3&gt;Load balancing and Redundancy&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Load balancers&lt;/strong&gt; are a principal part of any architecture, as their role is to distribute load across a set of nodes responsible for servicing requests. Their main purpose is to handle a lot of simultaneous connections and route those connections to one of the request nodes, allowing the system to scale to service more requests by just adding nodes.&lt;/p&gt;
&lt;p&gt;Load balancers also provide the critical function of being able to test the health of a node, such that if a node is unresponsive or over-loaded, taking advantage of the redundancy of different nodes in your system.&lt;/p&gt;
&lt;h3&gt;Queues and Asynchronous requests&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Queues&lt;/strong&gt; are a common way to bring asynchrony into your system, for instance, in the cases when some tasks (e.g., writes) may take a long time. This helps to achieve performance and availability.&lt;/p&gt;
&lt;p&gt;A queue is as simple as it sounds: a task comes in, is added to the queue and then workers pick up the next task, providing an abstraction of a client's request and its response.&lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;Back to my end-to-end Application&lt;/h1&gt;
&lt;p&gt;An excellent way to illustrate system design is looking at a real end-to-end application deployed at AWS. &lt;/p&gt;
&lt;p&gt;For the surf clips example I mentioned above, the architecture involves API event notifications, S3 buckets, an SNS topic, an SQS queue, and a Lambda function.&lt;/p&gt;
&lt;p&gt;The SQS queue stores the event for asynchronous processing (e.g. requesting certain clip edit). The Lambda function parses the event (e.g. run FFMPEG), and sends a notification message to the SNS topic (e.g. "clip is ready"). A topic groups together messages of the same type which might be of interest to a set of subscribers (e.g. "video_production" for front end API):&lt;/p&gt;
&lt;p&gt;&lt;img alt="cyberpunk" height="270px" src="./cyberpunk/aws.png" width="390px" /&gt;&lt;/p&gt;
&lt;p&gt;Together with the (Python) app source code to be run as a Lambda function, you can set all the components of your system in &lt;a href="https://www.terraform.io/"&gt;Terraform&lt;/a&gt;, in an elegant way. &lt;/p&gt;
&lt;p&gt;For instance, our Lambda function would be allocated by some code like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;resource&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;aws_lambda_function&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="n"&gt;function_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;FUNCTION_NAME&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
 &lt;span class="n"&gt;runtime&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;python2.7&amp;quot;&lt;/span&gt;
 &lt;span class="n"&gt;timeout&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;120&lt;/span&gt;
 &lt;span class="n"&gt;s3_bucket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;BUCKET&lt;/span&gt; &lt;span class="k"&gt;WHERE&lt;/span&gt; &lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;ZIP&lt;/span&gt; &lt;span class="nx"&gt;IS&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
 &lt;span class="n"&gt;s3_key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;${var.producer_zip}&amp;quot;&lt;/span&gt;
 &lt;span class="n"&gt;handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;lt;CODE HANDLER&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt; role = &amp;quot;&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;aws_iam_role.lambda_role.arn&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="s2"&gt; memory_size = 1024&lt;/span&gt;

&lt;span class="s2"&gt; vpc_config = {&lt;/span&gt;
&lt;span class="s2"&gt; ...&lt;/span&gt;
&lt;span class="s2"&gt; }&lt;/span&gt;

&lt;span class="s2"&gt; environment {&lt;/span&gt;
&lt;span class="s2"&gt; variables = {&lt;/span&gt;
&lt;span class="s2"&gt; ...&lt;/span&gt;
&lt;span class="s2"&gt; }&lt;/span&gt;
&lt;span class="s2"&gt; }&lt;/span&gt;
&lt;span class="s2"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Similarly, other AWS resources such as SQS, SNS, their topics, and buckets, such as the final destination S3 bucket (where the final clips would be stored), would have Terraform code snippets as well:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;resource&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;aws_s3_bucket&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="n"&gt;bucket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;bucket_name&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
 &lt;span class="n"&gt;acl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;public-read&amp;quot;&lt;/span&gt;
 &lt;span class="nx"&gt;cors_rule&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="n"&gt;allowed_headers&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;*&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;
 allowed_methods = &lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;GET&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;HEAD&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;
 allowed_origins = &lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;*&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;
 max_age_seconds = 86400
 }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, all you need is a couple of commands (such as &lt;code&gt;terraform apply&lt;/code&gt;), and your system would be up and running. &lt;/p&gt;
&lt;p&gt;This was a high-level overview of how you would start designing and implementing real-world, end-to-end applications, where &lt;strong&gt;design meets code and infrastructure as a code&lt;/strong&gt;. If you would like to check the code, &lt;a href="https://github.com/mvonsteinkirch/AWS_Resources_By_Examples/tree/master/lambda_functions/sqs-sns_example"&gt;this is the repo in GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;hr /&gt;
&lt;h1&gt;Learning References&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/terraform-providers/terraform-provider-aws"&gt;Terraform Provider AWS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.lecloud.net/tagged/scalability"&gt;Scalability for Dummies&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.aosabook.org/en/distsys.html"&gt;Scalable Web Architecture and Distributed Systems&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://horicky.blogspot.com/2010/10/scalable-system-design-patterns.html"&gt;Scalable System Design Patterns&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://medium.com/hulu-tech-blog/the-challenges-of-live-linear-video-ingest-part-one-live-versus-on-demand-system-requirements-89238f3af4f6"&gt;Hulu's "The Challenges of Live Video"&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.u-cursos.cl/usuario/f133dab21b6cbf814b4607124f431358/mi_blog/r/head_first_design_patterns.pdf"&gt;Heads First - Design Pattern&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;</summary><category term="aws"></category><category term="scalability"></category><category term="queues"></category><category term="lambda"></category><category term="sqs"></category><category term="mobgodb"></category></entry><entry><title>iPython Notebook server with Amazon Web Services (EC2)</title><link href="http://singularity.miavonsteinkirch.com/ipython-notebook-server-with-amazon-web-services-ec2.html" rel="alternate"></link><updated>2015-08-22T09:00:00-04:00</updated><author><name>Mia Steinkirch</name></author><id>tag:singularity.miavonsteinkirch.com,2015-08-22:ipython-notebook-server-with-amazon-web-services-ec2.html</id><summary type="html">&lt;p&gt;&lt;img alt="cyberpunk" height="270px" src="./cyberpunk/container.png" width="390px" /&gt;&lt;/p&gt;
&lt;h1&gt;AWS Console and EC2 Instance Launch.&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Log in at the &lt;a href="http://aws.amazon.com/console/"&gt;AWS Console&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;We're going to use the &lt;em&gt;Classic Wizard&lt;/em&gt; for the Instance Creation.&lt;/li&gt;
&lt;li&gt;The free tier is only eligible for the &lt;em&gt;T1 Micro&lt;/em&gt;.  You can use all the defaults.&lt;/li&gt;
&lt;li&gt;The Wizard is going to ask you to create a public key (or use an existing one if this isn't your first time). &lt;/li&gt;
&lt;li&gt;The &lt;em&gt;Security Group&lt;/em&gt; step is a crucial step. This step can only be configured when you launch the instance! Under the Create New Security Group:&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Setting Security Groups&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;You should have  these rules:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;   &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;SSH&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;22&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.0.0.0&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 

   &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;HTTPS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;443&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.0.0.0&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 

   &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;8888&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.0.0.0&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mf"&gt;0.&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Where 0.0.0.0/0 means access from &lt;em&gt;ANY&lt;/em&gt; outside I.P. address. We will use port 8888 for our iPython Notebook server. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Launch and SSH to the Instance!&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Setting up your Python Environment&lt;/h1&gt;
&lt;p&gt;Set up your python environment with &lt;a href="http://continuum.io/downloads.html"&gt;Anaconda&lt;/a&gt;. Use &lt;code&gt;wget&lt;/code&gt; to download the Anaconda installer to your server:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;wget&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//09c8d0b2229f813c1b93-c95ac804525aac4b6dba79b00b39d1d3.r79.cf1.rackcdn.com/Anaconda-2.0.0-Linux-x86_64.sh&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(or get from here: http://continuum.io/downloads)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;make the bash script executable:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;chmod&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="n"&gt;anaconda_script_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sh&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Run the Bash script. &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;anaconda_script_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sh&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Anaconda will install everything in a folder in your home directory.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;After a few minutes, the install will finish and will ask you to put the folder that was just created at the top of your $PATH. Make sure to reload your .bashrc:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bashrc&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;You can double-check which Python you are using by calling: &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;which&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Setting up iPython Notebook&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;From anywhere type:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;ipython&lt;/span&gt; &lt;span class="n"&gt;profile&lt;/span&gt; &lt;span class="n"&gt;create&lt;/span&gt; &lt;span class="n"&gt;nbserver&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Next, we're going to create a password for your notebook server. I'm going to do everything from within iPython right now. You can access the shell commands by prepending your commands with "!". Some commands like "cd" and "ls" don't need an "!" in front. It's pretty awesome. See "Magic Functions" in the resources section.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The output of passwd() is going to be used in the notebook configuration file later. So save/remember it!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Up next we're going to create a directory in our home folder called "certificates". In this folder we're going to save a self-signed SSL certificate:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;We're going to need the name of the certificate and the absolute path for the notebook configuration file.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Last, but not least, it's time to modify our ipython_notebook_config.py file.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Cruise over to ~/.ipython/profile_nbserver/ and open up the ipython_notebook_config.py file.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Uncomment each of them, one by one and save.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Launching you iPython Notebook&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;From anywhere run the following: &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;ipython&lt;/span&gt; &lt;span class="n"&gt;notebook&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;profile&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;nbserver&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;If you're successful, you should have an output like the above! &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Logging in to your Notebook from the Browser&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;To log in via the browser, we need the Public DNS for our sever. Cruise over to your AWS Console and select your instance from the Instances page. Under description you should find this:&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Using your public DNS go to your fav browser and type:
   https://your-Instance's-public-DNS:8888
Do not forget the https!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If successful you'll get a warning about the self-signed certificate. It's ok! Click &lt;strong&gt;Continue&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You're in! Enter your password, create a notebook, and start doing... stuff!&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Set up IPython Notebook to start automatically&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;So that you don't have to log in to SSH to get IPython Notebook running, you can set up to start it for you.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Find the path of ipython:&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;which&lt;/span&gt; &lt;span class="n"&gt;ipython&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Add this line to the file: /etc/rc.local:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;where&amp;gt;&lt;/span&gt;ipython notebook --profile nbserver --pylab inline
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Now you should be able to reboot, and you should be able to access your IPython Notebook as before. Type reboot into the command-line. 
This will boot you out of SSH, but you should be able to reconnect in a few minutes. After the server has had time to reboot, 
you should see if you can access your IPython Notebook server.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Final Notes&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Remember to always check the SSL signature before typing your password in. If you don't, then it is possible that there is a (wo)man-in-the-Middle attack going on.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Associate an &lt;a href="http://aws.amazon.com/articles/1346"&gt;Elastic IP&lt;/a&gt; to your instance. Now you've got a static IP no matter what kind of instance you start. Use your Elastic IP and set up forwarding from a domain that you own. Instead of having a random IP address, you can access your notebook via a memorable domain name. &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="aws"></category><category term="notebooks"></category></entry></feed>