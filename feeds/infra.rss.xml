<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>chmod +x singularity.sh</title><link>http://singularity.miavonsteinkirch.com/</link><description></description><atom:link href="http://singularity.miavonsteinkirch.com/feeds/infra.rss.xml" rel="self"></atom:link><lastBuildDate>Fri, 22 Sep 2017 09:00:00 -0400</lastBuildDate><item><title>So, What is GitOps?</title><link>http://singularity.miavonsteinkirch.com/so-what-is-gitops.html</link><description>&lt;p&gt;&lt;img alt="cyberpunk" height="270px" src="./cyberpunk/container.png" width="390px" /&gt;&lt;/p&gt;
&lt;p&gt;In general, there are two ways to deploy infrastructure changes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Procedural way&lt;/strong&gt;: telling some tool what to do, e.g.: &lt;a href="https://www.ansible.com/"&gt;Ansible&lt;/a&gt; (a glorified SSH). This is also known as a &lt;em&gt;push model&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Declarative way&lt;/strong&gt;: telling some tool what you want to have done, also known as &lt;em&gt;infrastructure as code&lt;/em&gt;, e.g.: &lt;a href="https://www.terraform.io/"&gt;Terraform&lt;/a&gt; and &lt;a href="https://www.pulumi.com/"&gt;Pulumi&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;GitOps&lt;/strong&gt; is a term created by &lt;a href="https://www.weave.works/technologies/gitops/"&gt;WeWorks&lt;/a&gt; and works by using Git as a source of truth for &lt;em&gt;declarative&lt;/em&gt; infrastructure and applications. Automated CI/CD pipelines roll out changes to your infrastructure after commits are pushed and approved in Git. This model is becoming a popular operating way for building applications on Kubernetes. &lt;/p&gt;
&lt;p&gt;&lt;img alt="cyberpunk" height="270px" src="./cyberpunk/gitiops1.png" width="390px" /&gt;&lt;/p&gt;
&lt;p&gt;In GitOps you only push code. The developer interacts with the source control, which triggers the CI/CD tool (e.g. &lt;a href="https://jenkins.io/"&gt;Jenkins&lt;/a&gt; or &lt;a href="https://circleci.com"&gt;CicleCI&lt;/a&gt;), and this pushes the docker image to the container register (e.g. &lt;a href="https://hub.docker.com/"&gt;docker hub&lt;/a&gt;). So you can see the Docker image as an artifact! &lt;/p&gt;
&lt;p&gt;To deploy that Docker image, you have a different &lt;strong&gt;config repository&lt;/strong&gt; which contains the k8s manifests. The CI/CD tool sends a pull request, and when it is merged, a &lt;strong&gt;magic pod&lt;/strong&gt; in the k8s cluster pulls the image to the cluster (similar to &lt;code&gt;kubectl apply&lt;/code&gt;, the popular &lt;a href="https://kubernetes.io/docs/reference/kubectl/kubectl/"&gt;k8s management tool&lt;/a&gt;, or even &lt;code&gt;helm update&lt;/code&gt;, another popular &lt;a href="https://helm.sh/"&gt;k8s production tool&lt;/a&gt;). &lt;/p&gt;
&lt;p&gt;Everything is controlled through pull requests. You push code, not containers. &lt;/p&gt;
&lt;p&gt;Wait, but what is this &lt;strong&gt;magic pod&lt;/strong&gt;? Glad you ask: the magic is performed by a tool called &lt;a href="https://github.com/fluxcd/flux"&gt;Flux&lt;/a&gt;, which automatically ensures that the state of a cluster matches the config in Git. It uses an operator in the cluster to trigger deployments inside Kubernetes, which means you don't need a separate CI/CD tool. It monitors all relevant image repositories, detects new images, triggers deployments, and updates the desired running configuration based on that.&lt;/p&gt;
&lt;p&gt;So, ultimately, the key advantages of GitOps models are: increased productivity and stabilities, higher reliability, and standardization. But mostly, no more manual &lt;code&gt;kubectl&lt;/code&gt; commands anymore!&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Mia Steinkirch</dc:creator><pubDate>Fri, 22 Sep 2017 09:00:00 -0400</pubDate><guid>tag:singularity.miavonsteinkirch.com,2017-09-22:so-what-is-gitops.html</guid><category>k8s</category><category>scalability</category><category>gitops</category><category>flux</category></item></channel></rss>